/*
In NativeScript, a file with the same name as an XML file is known as
a code-behind file. The code-behind is a great place to place your view
logic, and to set up your page’s data binding.
*/
"use strict";
var cars_view_model_1 = require("./cars-view-model");
var frameModule = require("ui/frame");
var carsViewModel = new cars_view_model_1.CarsViewModel();
function onCarItemTap(args) {
    var tappedCarItem = args.view.bindingContext;
    frameModule.topmost().navigate({
        moduleName: "cars/car-details-page/car-details-page",
        context: tappedCarItem
    });
}
exports.onCarItemTap = onCarItemTap;
// Event handler for Page "navigatingTo" event attached in main-page.xml
function onNavigatingTo(args) {
    /*
    This gets a reference this page’s <Page> UI component. You can
    view the API reference of the Page to see what’s available at
    https://docs.nativescript.org/api-reference/classes/_ui_page_.page.html
    */
    var page = args.object;
    /*
    A page’s bindingContext is an object that should be used to perform
    data binding between XML markup and TypeScript code. Properties
    on the bindingContext can be accessed using the {{ }} syntax in XML.
    In this example, the {{ message }} and {{ onTap }} bindings are resolved
    against the object returned by createViewModel().

    You can learn more about data binding in NativeScript at
    https://docs.nativescript.org/core-concepts/data-binding.
    */
    page.bindingContext = carsViewModel;
    carsViewModel.empty();
    carsViewModel.load();
}
exports.onNavigatingTo = onNavigatingTo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fycy1saXN0LXBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjYXJzLWxpc3QtcGFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztFQUlFOztBQVdGLHFEQUFrRDtBQUVsRCxzQ0FBeUM7QUFHekMsSUFBSSxhQUFhLEdBQUcsSUFBSSwrQkFBYSxFQUFFLENBQUM7QUFFeEMsc0JBQTZCLElBQUk7SUFDN0IsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7SUFFN0MsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQztRQUMzQixVQUFVLEVBQUUsd0NBQXdDO1FBQ3BELE9BQU8sRUFBRSxhQUFhO0tBQ3pCLENBQUMsQ0FBQztBQUNQLENBQUM7QUFQRCxvQ0FPQztBQUVELHdFQUF3RTtBQUN4RSx3QkFBK0IsSUFBZTtJQUMxQzs7OztNQUlFO0lBQ0YsSUFBSSxJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUU3Qjs7Ozs7Ozs7O01BU0U7SUFFRixJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQztJQUVwQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdEIsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3pCLENBQUM7QUF2QkQsd0NBdUJDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkluIE5hdGl2ZVNjcmlwdCwgYSBmaWxlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBhbiBYTUwgZmlsZSBpcyBrbm93biBhc1xuYSBjb2RlLWJlaGluZCBmaWxlLiBUaGUgY29kZS1iZWhpbmQgaXMgYSBncmVhdCBwbGFjZSB0byBwbGFjZSB5b3VyIHZpZXdcbmxvZ2ljLCBhbmQgdG8gc2V0IHVwIHlvdXIgcGFnZeKAmXMgZGF0YSBiaW5kaW5nLlxuKi9cblxuLypcbk5hdGl2ZVNjcmlwdCBhZGhlcmVzIHRvIHRoZSBDb21tb25KUyBzcGVjaWZpY2F0aW9uIGZvciBkZWFsaW5nIHdpdGhcbkphdmFTY3JpcHQgbW9kdWxlcy4gVGhlIENvbW1vbkpTIHJlcXVpcmUoKSBmdW5jdGlvbiBpcyBob3cgeW91IGltcG9ydFxuSmF2YVNjcmlwdCBtb2R1bGVzIGRlZmluZWQgaW4gb3RoZXIgZmlsZXMuXG4qL1xuXG5pbXBvcnQgeyBDYXIgfSBmcm9tIFwiLi9zaGFyZWQvbW9kZWxzL2NhclwiO1xuaW1wb3J0IHsgRXZlbnREYXRhIH0gZnJvbSAnZGF0YS9vYnNlcnZhYmxlJztcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICd1aS9wYWdlJztcbmltcG9ydCB7IENhcnNWaWV3TW9kZWwgfSBmcm9tICcuL2NhcnMtdmlldy1tb2RlbCc7XG5cbmltcG9ydCBmcmFtZU1vZHVsZSA9IHJlcXVpcmUoXCJ1aS9mcmFtZVwiKTtcbmltcG9ydCBvYnNlcnZhYmxlTW9kdWxlID0gcmVxdWlyZShcImRhdGEvb2JzZXJ2YWJsZVwiKTtcblxudmFyIGNhcnNWaWV3TW9kZWwgPSBuZXcgQ2Fyc1ZpZXdNb2RlbCgpO1xuXG5leHBvcnQgZnVuY3Rpb24gb25DYXJJdGVtVGFwKGFyZ3MpIHtcbiAgICB2YXIgdGFwcGVkQ2FySXRlbSA9IGFyZ3Mudmlldy5iaW5kaW5nQ29udGV4dDtcblxuICAgIGZyYW1lTW9kdWxlLnRvcG1vc3QoKS5uYXZpZ2F0ZSh7XG4gICAgICAgIG1vZHVsZU5hbWU6IFwiY2Fycy9jYXItZGV0YWlscy1wYWdlL2Nhci1kZXRhaWxzLXBhZ2VcIixcbiAgICAgICAgY29udGV4dDogdGFwcGVkQ2FySXRlbVxuICAgIH0pO1xufVxuXG4vLyBFdmVudCBoYW5kbGVyIGZvciBQYWdlIFwibmF2aWdhdGluZ1RvXCIgZXZlbnQgYXR0YWNoZWQgaW4gbWFpbi1wYWdlLnhtbFxuZXhwb3J0IGZ1bmN0aW9uIG9uTmF2aWdhdGluZ1RvKGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIC8qXG4gICAgVGhpcyBnZXRzIGEgcmVmZXJlbmNlIHRoaXMgcGFnZeKAmXMgPFBhZ2U+IFVJIGNvbXBvbmVudC4gWW91IGNhblxuICAgIHZpZXcgdGhlIEFQSSByZWZlcmVuY2Ugb2YgdGhlIFBhZ2UgdG8gc2VlIHdoYXTigJlzIGF2YWlsYWJsZSBhdFxuICAgIGh0dHBzOi8vZG9jcy5uYXRpdmVzY3JpcHQub3JnL2FwaS1yZWZlcmVuY2UvY2xhc3Nlcy9fdWlfcGFnZV8ucGFnZS5odG1sXG4gICAgKi9cbiAgICBsZXQgcGFnZSA9IDxQYWdlPmFyZ3Mub2JqZWN0O1xuXG4gICAgLypcbiAgICBBIHBhZ2XigJlzIGJpbmRpbmdDb250ZXh0IGlzIGFuIG9iamVjdCB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHBlcmZvcm1cbiAgICBkYXRhIGJpbmRpbmcgYmV0d2VlbiBYTUwgbWFya3VwIGFuZCBUeXBlU2NyaXB0IGNvZGUuIFByb3BlcnRpZXNcbiAgICBvbiB0aGUgYmluZGluZ0NvbnRleHQgY2FuIGJlIGFjY2Vzc2VkIHVzaW5nIHRoZSB7eyB9fSBzeW50YXggaW4gWE1MLlxuICAgIEluIHRoaXMgZXhhbXBsZSwgdGhlIHt7IG1lc3NhZ2UgfX0gYW5kIHt7IG9uVGFwIH19IGJpbmRpbmdzIGFyZSByZXNvbHZlZFxuICAgIGFnYWluc3QgdGhlIG9iamVjdCByZXR1cm5lZCBieSBjcmVhdGVWaWV3TW9kZWwoKS5cblxuICAgIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBkYXRhIGJpbmRpbmcgaW4gTmF0aXZlU2NyaXB0IGF0XG4gICAgaHR0cHM6Ly9kb2NzLm5hdGl2ZXNjcmlwdC5vcmcvY29yZS1jb25jZXB0cy9kYXRhLWJpbmRpbmcuXG4gICAgKi9cblxuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSBjYXJzVmlld01vZGVsO1xuXG4gICAgY2Fyc1ZpZXdNb2RlbC5lbXB0eSgpO1xuICAgIGNhcnNWaWV3TW9kZWwubG9hZCgpO1xufSJdfQ==